// Loads environment variables from a .env file into process.env.
//  For example, process.env.MONGODB_URI will read your database URI from .env.
require('dotenv').config();

//Imports the Express framework to handle routing and middleware.
const express = require('express');


// Imports Mongoose for connecting to MongoDB and defining data models.
const mongoose = require('mongoose');

// Imports CORS middleware to allow requests from different origins
//  (like frontend on another port or domain).
const cors = require('cors');

//Imports Node's built-in path module for working with file/directory
//  paths (used for serving static files).
const path = require('path'); // Moved to top with other requires

// Initializes the Express application.
const app = express();
app.use(express.json());
// Import routes
// Imports the route modules that handle logic for:
//Authentication (/api/auth) , FIRs (/api/firs) ,Complaints (/api/complaints)
const authRoutes = require('./routes/authRoutes');
const firRoutes = require('./routes/firRoutes');
const complaintRoutes = require('./routes/complaintRoutes');

// Middleware setup
// Enables CORS to allow frontend (e.g., React) to make requests to this backend.
app.use(cors());
app.use('/api/firs', firRoutes);
 //Parses incoming JSON payloads so req.body works.

// Serve static files from React frontend (Serves the static files generated by your React app
//  (after running npm run build in the React project).)
app.use(express.static(path.join(__dirname, '../frontend/build')));

// Database connection
//Connects your app to MongoDB using the URI stored in .env. Logs success or error.
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

// API Routes
// Mounts route handlers:
// /api/auth → login/register
// /api/firs → FIR-related actions
// /api/complaints → complaint-related actions
app.use('/api/auth', authRoutes);
app.use('/api/firs', firRoutes);
 app.use('/api/complaints', complaintRoutes);

// Simple test route , A quick test route to verify if the server is up.
app.get('/api/test', (req, res) => {
  res.send('Server is running!');
});

// All other GET requests should return the React app
//For all routes not handled above (like /about, /dashboard in React), this serves index.html to allow React Router to handle it.
app.get('/*', (req, res) => {
  res.sendFile(path.join(__dirname, '../frontend/build', 'index.html'));
});

//Starts the Express server on the specified port (default 5000) and logs the message.
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));